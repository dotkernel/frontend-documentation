{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"#readmemd","text":"","title":"../../README.md"},{"location":"v5/core-features/account-anonymization/","text":"Account anonymization According to the GDPR, companies that record personal data from EU citizens must delete said data if its owner requests its deletion. An alternative is to anonymize the data, according to this article . What is 'personal data'? According to this article , personal data is: A name and surname. A home address. An email address such as name.surname@company.com. An identification card number. Location data (for example the location data function on a mobile phone). An Internet Protocol (IP) address. A cookie ID. The advertising identifier of your phone. A phone number. Data held by a hospital or doctor, which could be a symbol that uniquely identifies a person. Out of the box, Dotkernel Frontend saves the user's name (firstname and lastname) and email (identity). This personal data is used for emails related to password reset and account activation. Anonymization The anonymization process makes these replacements: The firstname and lastname are replaced with anonymous concatenated with the current UNIX timestamp, e.g. anonymous1725980747 . The email is replaced with anonymous concatenated with the current UNIX timestamp and the value in userAnonymizeAppend , e.g. anonymous1725980747@example.com . The avatar image and its database record are deleted. The userAnonymizeAppend key can be set in config/autoload/local.php or left empty. Note: setting userAnonymizeAppend to an email domain would work as a catch-all email, if your email service provider has this option enabled.","title":"Account anonymization"},{"location":"v5/core-features/account-anonymization/#account-anonymization","text":"According to the GDPR, companies that record personal data from EU citizens must delete said data if its owner requests its deletion. An alternative is to anonymize the data, according to this article .","title":"Account anonymization"},{"location":"v5/core-features/account-anonymization/#what-is-personal-data","text":"According to this article , personal data is: A name and surname. A home address. An email address such as name.surname@company.com. An identification card number. Location data (for example the location data function on a mobile phone). An Internet Protocol (IP) address. A cookie ID. The advertising identifier of your phone. A phone number. Data held by a hospital or doctor, which could be a symbol that uniquely identifies a person. Out of the box, Dotkernel Frontend saves the user's name (firstname and lastname) and email (identity). This personal data is used for emails related to password reset and account activation.","title":"What is 'personal data'?"},{"location":"v5/core-features/account-anonymization/#anonymization","text":"The anonymization process makes these replacements: The firstname and lastname are replaced with anonymous concatenated with the current UNIX timestamp, e.g. anonymous1725980747 . The email is replaced with anonymous concatenated with the current UNIX timestamp and the value in userAnonymizeAppend , e.g. anonymous1725980747@example.com . The avatar image and its database record are deleted. The userAnonymizeAppend key can be set in config/autoload/local.php or left empty. Note: setting userAnonymizeAppend to an email domain would work as a catch-all email, if your email service provider has this option enabled.","title":"Anonymization"},{"location":"v5/core-features/authorization/","text":"Authorization Guards The packages responsible for restricting access to certain parts of the application are dot-rbac-guard and dot-rbac . These packages work together to create an infrastructure that is customizable and diversified to manage user access to the platform by specifying the type of role the user has. The authorization.global.php file provides multiple configurations specifying multiple roles as well as the types of permissions to which these roles have access. //example of a flat RBAC model that specifies two types of roles as well as their permission 'roles' =&gt; [ 'admin' =&gt; [ 'permissions' =&gt; [ 'authenticated', 'edit', 'delete', //etc.. ] ], 'user' =&gt; [ 'permissions' =&gt; [ 'authenticated', //etc.. ] ] ] The authorization-guards.global.php file provides configuration to restrict access to certain actions based on the permissions defined in authorization.global.php so basically we have to add the permissions in the dot-rbac configuration file first to specify the action restriction permissions. // configuration example to restrict certain actions of some routes based on the permissions specified in the dot-rbac configuration file 'rules' =&gt; [ [ 'route' =&gt; 'account', 'actions' =&gt; [//list of actions to apply , or empty array for all actions 'unregister', 'avatar', 'details', 'changePassword' ], 'permissions' =&gt; ['authenticated'] ], [ 'route' =&gt; 'admin', 'actions' =&gt; [ 'deleteAccount' ], 'permissions' =&gt; [ 'delete' //list of roles to allow ] ] ]","title":"Authorization"},{"location":"v5/core-features/authorization/#authorization-guards","text":"The packages responsible for restricting access to certain parts of the application are dot-rbac-guard and dot-rbac . These packages work together to create an infrastructure that is customizable and diversified to manage user access to the platform by specifying the type of role the user has. The authorization.global.php file provides multiple configurations specifying multiple roles as well as the types of permissions to which these roles have access. //example of a flat RBAC model that specifies two types of roles as well as their permission 'roles' =&gt; [ 'admin' =&gt; [ 'permissions' =&gt; [ 'authenticated', 'edit', 'delete', //etc.. ] ], 'user' =&gt; [ 'permissions' =&gt; [ 'authenticated', //etc.. ] ] ] The authorization-guards.global.php file provides configuration to restrict access to certain actions based on the permissions defined in authorization.global.php so basically we have to add the permissions in the dot-rbac configuration file first to specify the action restriction permissions. // configuration example to restrict certain actions of some routes based on the permissions specified in the dot-rbac configuration file 'rules' =&gt; [ [ 'route' =&gt; 'account', 'actions' =&gt; [//list of actions to apply , or empty array for all actions 'unregister', 'avatar', 'details', 'changePassword' ], 'permissions' =&gt; ['authenticated'] ], [ 'route' =&gt; 'admin', 'actions' =&gt; [ 'deleteAccount' ], 'permissions' =&gt; [ 'delete' //list of roles to allow ] ] ]","title":"Authorization Guards"},{"location":"v5/core-features/csrf/","text":"CSRF protection in forms A Cross-Site Request Forgery (CSRF) attack is a type of security vulnerability that tricks a user into performing actions on a web application in which they are authenticated, without their knowledge or consent. Web applications can protect users against these types of attacks by implementing CSRF tokens in their forms which are known only to the application that generated them and must be included when submitting forms. With each visit, a new CSRF token is added to the form so tokens are not reusable between forms. Missing to provide a valid CSRF token will result in a form validation error. Implement CSRF protection Implementing CSRF protection requires three steps: create new field using laminas/laminas-form 's CSRF element validate new field using laminas/laminas-session 's CSRF validator render field using laminas/laminas-form 's FormElement helper Create field Open the form's PHP class and append the following code to the method that initializes the fields (usually init ): $this-&gt;add(new \\Laminas\\Form\\Element\\Csrf('exampleCsrf', [ 'csrf_options' =&gt; [ 'timeout' =&gt; 3600, 'session' =&gt; new \\Laminas\\Session\\Container(), ], ])); where exampleCsrf should be a suggestive name that describes the purpose of the field (example: forgotPasswordCsrf ). Validate field Open the InputFilter that validates the form fields and append the following code to the method that initializes the fields (usually init ): $csrf = new \\Laminas\\InputFilter\\Input('exampleCsrf'); $csrf-&gt;setRequired(true); $csrf-&gt;getFilterChain() -&gt;attachByName(\\Laminas\\Filter\\StringTrim::class) -&gt;attachByName(\\Laminas\\Filter\\StripTags::class); $csrf-&gt;getValidatorChain() -&gt;attachByName(\\Laminas\\Validator\\NotEmpty::class, [ 'message' =&gt; '&lt;b&gt;CSRF&lt;/b&gt; is required and cannot be empty', ], true) -&gt;attachByName(\\Laminas\\Session\\Validator\\Csrf::class, [ 'name' =&gt; 'exampleCsrf', 'message' =&gt; '&lt;b&gt;CSRF&lt;/b&gt; is invalid', 'session' =&gt; new \\Laminas\\Session\\Container(), ], true); $this-&gt;add($csrf); where exampleCsrf must match the CSRF field's name in the form. Don't forget to modify both occurrences in this file. Make sure that you validate the form using its isValid method in the handler/controller where it is submitted. Render field Open the template that renders your form and add the following code somewhere between the form's opening and closing tags: {{ formElement(form.get('exampleCsrf')) }} Test the implementation Access your form from the browser and view its source. You should see a new hidden field, called exampleCsrf (or however you named it). After filling out the form, submitting it should work as before. In order to make sure that the new CSRF field works as expected, you can inspect the form using your browser's Developer tools and modify its value in any way. Submitting a filled out form should result in a validation error: CSRF is required and cannot be empty Timeout Note the timeout option in your PHP form's exampleCsrf field, with its default value set to 3600 . This represents the value in seconds for how long the token is valid. Submitting a form that has been rendered for longer than this value will result in a validation error: CSRF is invalid You can modify the value of timeout in each form, but the default value should work in most cases.","title":"CSRF"},{"location":"v5/core-features/csrf/#csrf-protection-in-forms","text":"A Cross-Site Request Forgery (CSRF) attack is a type of security vulnerability that tricks a user into performing actions on a web application in which they are authenticated, without their knowledge or consent. Web applications can protect users against these types of attacks by implementing CSRF tokens in their forms which are known only to the application that generated them and must be included when submitting forms. With each visit, a new CSRF token is added to the form so tokens are not reusable between forms. Missing to provide a valid CSRF token will result in a form validation error.","title":"CSRF protection in forms"},{"location":"v5/core-features/csrf/#implement-csrf-protection","text":"Implementing CSRF protection requires three steps: create new field using laminas/laminas-form 's CSRF element validate new field using laminas/laminas-session 's CSRF validator render field using laminas/laminas-form 's FormElement helper","title":"Implement CSRF protection"},{"location":"v5/core-features/csrf/#test-the-implementation","text":"Access your form from the browser and view its source. You should see a new hidden field, called exampleCsrf (or however you named it). After filling out the form, submitting it should work as before. In order to make sure that the new CSRF field works as expected, you can inspect the form using your browser's Developer tools and modify its value in any way. Submitting a filled out form should result in a validation error: CSRF is required and cannot be empty","title":"Test the implementation"},{"location":"v5/core-features/dependency-injection/","text":"Dependency Injection Dependency injection is a design pattern used in software development to implement inversion of control. In simpler terms, it's the act of providing dependencies for an object during instantiation. In PHP, dependency injection can be implemented in various ways, including through constructor injection, setter injection and property injection. DotKernel API, through its dot-dependency-injection package focuses only on constructor injection. Usage DotKernel API comes out of the box with the dot-dependency-injection package, which provides all we need for injecting dependencies into any object you want. dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Dependencies are specified as separate parameters of the #[Inject] attribute. For our example we will inject UserService and config dependencies into a UseHandler . use Dot\\DependencyInjection\\Attribute\\Inject; class UserHandler implements RequestHandlerInterface { #[Inject( UserService::class, \"config\", )] public function __construct( protected UserServiceInterface $userService, protected array $config, ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: config.example The next step is to register the class in the ConfigProvider under factories using Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class public function getDependencies(): array { return [ 'factories' =&gt; [ UserHandler::class =&gt; AttributedServiceFactory::class ] ]; } That's it. When your object is instantiated from the container, it will automatically have its dependencies resolved. Dependencies injection is available to any object within DotKernel API. For example, you can inject dependencies in a service, a handler and so on, simply by registering it in the ConfigProvider .","title":"Dependency Injection"},{"location":"v5/core-features/dependency-injection/#dependency-injection","text":"Dependency injection is a design pattern used in software development to implement inversion of control. In simpler terms, it's the act of providing dependencies for an object during instantiation. In PHP, dependency injection can be implemented in various ways, including through constructor injection, setter injection and property injection. DotKernel API, through its dot-dependency-injection package focuses only on constructor injection.","title":"Dependency Injection"},{"location":"v5/core-features/dependency-injection/#usage","text":"DotKernel API comes out of the box with the dot-dependency-injection package, which provides all we need for injecting dependencies into any object you want. dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Dependencies are specified as separate parameters of the #[Inject] attribute. For our example we will inject UserService and config dependencies into a UseHandler . use Dot\\DependencyInjection\\Attribute\\Inject; class UserHandler implements RequestHandlerInterface { #[Inject( UserService::class, \"config\", )] public function __construct( protected UserServiceInterface $userService, protected array $config, ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: config.example The next step is to register the class in the ConfigProvider under factories using Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class public function getDependencies(): array { return [ 'factories' =&gt; [ UserHandler::class =&gt; AttributedServiceFactory::class ] ]; } That's it. When your object is instantiated from the container, it will automatically have its dependencies resolved. Dependencies injection is available to any object within DotKernel API. For example, you can inject dependencies in a service, a handler and so on, simply by registering it in the ConfigProvider .","title":"Usage"},{"location":"v5/core-features/languages/","text":"Languages The local.php.dist file provides an example for working with multiple languages. The translator variable can be expanded to other languages using Poedit which can edit .po files like the example in data/language/da_DK/LC_MESSAGES/messages.po . The compiled file will have the extension .mo To apply the translations the twig templates need either {% trans 'translateText' %} or {{ translateText|trans }} then the js file needs translateText(\"translateText\") NOTE: In order to have a proper behaviour of language selector , you need the language pack installed at Operating System level. dnf install glibc-all-langpacks Then restart PHP-FPM.","title":"Languages"},{"location":"v5/core-features/languages/#languages","text":"The local.php.dist file provides an example for working with multiple languages. The translator variable can be expanded to other languages using Poedit which can edit .po files like the example in data/language/da_DK/LC_MESSAGES/messages.po . The compiled file will have the extension .mo To apply the translations the twig templates need either {% trans 'translateText' %} or {{ translateText|trans }} then the js file needs translateText(\"translateText\") NOTE: In order to have a proper behaviour of language selector , you need the language pack installed at Operating System level. dnf install glibc-all-langpacks Then restart PHP-FPM.","title":"Languages"},{"location":"v5/core-features/npm_commands/","text":"NPM Commands To install dependencies into the node_modules directory run this command. npm install If npm install fails, this could be caused by user permissions of npm. Recommendation is to install npm through Node Version Manager . The watch command compiles the components then watches the files and recompiles when one of them changes. npm run watch After all updates are done, this command compiles the assets locally, minifies them and makes them ready for production. npm run prod","title":"NPM Commands"},{"location":"v5/core-features/npm_commands/#npm-commands","text":"To install dependencies into the node_modules directory run this command. npm install If npm install fails, this could be caused by user permissions of npm. Recommendation is to install npm through Node Version Manager . The watch command compiles the components then watches the files and recompiles when one of them changes. npm run watch After all updates are done, this command compiles the assets locally, minifies them and makes them ready for production. npm run prod","title":"NPM Commands"},{"location":"v5/installation/composer/","text":"Composer Installation of Packages Composer is required to install DotKernel frontend . You can install Composer starting here . Install dependencies composer install The setup script prompts for some configuration settings, for example the lines below: Please select which config file you wish to inject 'Laminas\\Diactoros\\ConfigProvider' into: [0] Do not inject [1] config/config.php Make your selection (default is 1): Simply select [0] Do not inject , because DotKernel includes its own configProvider which already contains the prompted configurations. If you choose [1] config/config.php Laminas's ConfigProvider from session will be injected. The next question is: Remember this option for other packages of the same type? (y/N) Type y here, and hit enter Development mode If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Composer"},{"location":"v5/installation/composer/#composer-installation-of-packages","text":"Composer is required to install DotKernel frontend . You can install Composer starting here .","title":"Composer Installation of Packages"},{"location":"v5/installation/composer/#install-dependencies","text":"composer install The setup script prompts for some configuration settings, for example the lines below: Please select which config file you wish to inject 'Laminas\\Diactoros\\ConfigProvider' into: [0] Do not inject [1] config/config.php Make your selection (default is 1): Simply select [0] Do not inject , because DotKernel includes its own configProvider which already contains the prompted configurations. If you choose [1] config/config.php Laminas's ConfigProvider from session will be injected. The next question is: Remember this option for other packages of the same type? (y/N) Type y here, and hit enter","title":"Install dependencies"},{"location":"v5/installation/composer/#development-mode","text":"If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Development mode"},{"location":"v5/installation/configuration-files/","text":"Configuration Files Prepare config files duplicate config/autoload/debugbar.local.php.dist as config/autoload/debugbar.local.php duplicate config/autoload/development.local.php.dist as config/autoload/development.local.php duplicate config/autoload/local.php.dist as config/autoload/local.php duplicate config/autoload/mail.local.php.dist as config/autoload/mail.local.php Edit config/autoload/local.php according to your dev machine and fill in the database configuration. Note If you intend to send emails from your Frontend, make sure to fill in SMTP connection params. This will be covered in the next section. optional : in order to run/create tests, duplicate config/autoload/local.test.php.dist as config/autoload/local.test.php Note this creates a new in-memory database that your tests will run on. Configuration - Mail If you want your application to send mails on registration, contact etc. add valid credentials to the following keys in config/autoload/mail.local.php Under message_options key: from - email address that will send emails (required) from_name - organization name for signing sent emails (optional) Under smtp_options key: host - hostname or IP address of the mail server (required) connection_config - add the username and password keys (required) In config/autoload/local.php edit the key contact =&gt; message_receivers =&gt; to with string values for emails that should receive contact messages. Note: Please add at least 1 email address in order for contact message to reach someone Also feel free to add as many CCs as you want under the contact =&gt; message_receivers =&gt; cc key. Configuration - reCAPTCHA reCAPTCHA is used to prevent abusive activities on your website. DotKernel frontend uses the Google reCAPTCHA for its contact us form. You must first generate a siteKey and secretKey in your Google account - Google reCAPTCHA Update the recaptcha array in config/autoload/local.php with the siteKey and secretKey from Google reCAPTCHA. Note: you need to whitelist localhost in the reCAPTCHA settings page during development. When in production do not forget to either remove localhost from the reCAPTCHA whitelist, or have a separate reCAPTCHA","title":"Configuration Files"},{"location":"v5/installation/configuration-files/#configuration-files","text":"","title":"Configuration Files"},{"location":"v5/installation/configuration-files/#prepare-config-files","text":"duplicate config/autoload/debugbar.local.php.dist as config/autoload/debugbar.local.php duplicate config/autoload/development.local.php.dist as config/autoload/development.local.php duplicate config/autoload/local.php.dist as config/autoload/local.php duplicate config/autoload/mail.local.php.dist as config/autoload/mail.local.php Edit config/autoload/local.php according to your dev machine and fill in the database configuration.","title":"Prepare config files"},{"location":"v5/installation/configuration-files/#configuration-mail","text":"If you want your application to send mails on registration, contact etc. add valid credentials to the following keys in config/autoload/mail.local.php Under message_options key: from - email address that will send emails (required) from_name - organization name for signing sent emails (optional) Under smtp_options key: host - hostname or IP address of the mail server (required) connection_config - add the username and password keys (required) In config/autoload/local.php edit the key contact =&gt; message_receivers =&gt; to with string values for emails that should receive contact messages. Note: Please add at least 1 email address in order for contact message to reach someone Also feel free to add as many CCs as you want under the contact =&gt; message_receivers =&gt; cc key.","title":"Configuration - Mail"},{"location":"v5/installation/configuration-files/#configuration-recaptcha","text":"reCAPTCHA is used to prevent abusive activities on your website. DotKernel frontend uses the Google reCAPTCHA for its contact us form. You must first generate a siteKey and secretKey in your Google account - Google reCAPTCHA Update the recaptcha array in config/autoload/local.php with the siteKey and secretKey from Google reCAPTCHA. Note: you need to whitelist localhost in the reCAPTCHA settings page during development. When in production do not forget to either remove localhost from the reCAPTCHA whitelist, or have a separate reCAPTCHA","title":"Configuration - reCAPTCHA"},{"location":"v5/installation/development-mode-debugbar/","text":"Development mode Run this command to enable dev mode by turning debug flag to true and turning configuration caching to off . It will also make sure that any existing config cache is cleared. composer development-enable If not already done, remove the .dist extension from config/autoload/development.global.php.dist . Using DebugBar DotKernel comes with its own DebugBar already installed and configured. It is enabled when you clone the config file config/autoload/debugbar.local.php.dist as config/autoload/debugbar.local.php . You can disable the tool by going into its config file config/autoload/debugbar.local.php and changing 'enabled' =&gt; true to 'enabled' =&gt; false","title":"Development Mode and the Debugbar"},{"location":"v5/installation/development-mode-debugbar/#development-mode","text":"Run this command to enable dev mode by turning debug flag to true and turning configuration caching to off . It will also make sure that any existing config cache is cleared. composer development-enable If not already done, remove the .dist extension from config/autoload/development.global.php.dist .","title":"Development mode"},{"location":"v5/installation/development-mode-debugbar/#using-debugbar","text":"DotKernel comes with its own DebugBar already installed and configured. It is enabled when you clone the config file config/autoload/debugbar.local.php.dist as config/autoload/debugbar.local.php . You can disable the tool by going into its config file config/autoload/debugbar.local.php and changing 'enabled' =&gt; true to 'enabled' =&gt; false","title":"Using DebugBar"},{"location":"v5/installation/doctrine-orm/","text":"Doctrine ORM Setup database Make sure you fill out the database credentials in config/autoload/local.php under $databases['default'] . Create a new MySQL database and set its collation to utf8mb4_general_ci . Running migrations Running the migrations is done with this command php vendor/bin/doctrine-migrations migrate Note: if you have already run the phinx migrations, you may get this message WARNING! You have x previously executed migrations in the database that are not registered migrations. {migration list} Are you sure you wish to continue? (y/n) After submitting y , you will get this confirmation message. WARNING! You are about to execute a database migration that could result in schema changes and data loss. Are you sure you wish to continue? (y/n) Again, submit y to run all the migrations in chronological order. Each migration will be logged in the migrations table to prevent running the same migration more than once, which is often not desirable. Creating migrations To generate a new migration file, use this command: php vendor/bin/doctrine-migrations migrations:generate It creates a PHP file like this one /data/doctrine/migrations/Version20220606131835.php that can then be edited in the IDE. You can add new queries to be executed when the migration is run (in public function up ) and optionally queries that undo those changes (in public function down ). Here is an example you can add in public function up $this-&gt;addSql('ALTER TABLE users ADD test VARCHAR(255) NOT NULL'); and its opposite in public function down $this-&gt;addSql('ALTER TABLE users DROP test'); Executing fixtures Fixtures are used to seed the database with initial values and should only be executed ONCE, after migrating the database. Seeding the database is done with the help of our custom package dotkernel/dot-data-fixtures built on top of doctrine/data-fixtures. See below on how to use our CLI command for listing and executing Doctrine data fixtures. An example of a fixtures class is data/doctrine/fixtures/RoleLoader.php To list all the available fixtures, by order of execution, run: php bin/doctrine fixtures:list To execute all fixtures, run: php bin/doctrine fixtures:execute To execute a specific fixtures, run: php bin/doctrine fixtures:execute --class=RoleLoader Fixtures can and should be ordered to ensure database consistency, more on ordering fixtures can be found here : https://www.doctrine-project.org/projects/doctrine-data-fixtures/en/latest/how-to/fixture-ordering.html#fixture-ordering","title":"Doctrine ORM"},{"location":"v5/installation/doctrine-orm/#doctrine-orm","text":"","title":"Doctrine ORM"},{"location":"v5/installation/doctrine-orm/#setup-database","text":"Make sure you fill out the database credentials in config/autoload/local.php under $databases['default'] . Create a new MySQL database and set its collation to utf8mb4_general_ci .","title":"Setup database"},{"location":"v5/installation/doctrine-orm/#running-migrations","text":"Running the migrations is done with this command php vendor/bin/doctrine-migrations migrate Note: if you have already run the phinx migrations, you may get this message WARNING! You have x previously executed migrations in the database that are not registered migrations. {migration list} Are you sure you wish to continue? (y/n) After submitting y , you will get this confirmation message. WARNING! You are about to execute a database migration that could result in schema changes and data loss. Are you sure you wish to continue? (y/n) Again, submit y to run all the migrations in chronological order. Each migration will be logged in the migrations table to prevent running the same migration more than once, which is often not desirable.","title":"Running migrations"},{"location":"v5/installation/doctrine-orm/#creating-migrations","text":"To generate a new migration file, use this command: php vendor/bin/doctrine-migrations migrations:generate It creates a PHP file like this one /data/doctrine/migrations/Version20220606131835.php that can then be edited in the IDE. You can add new queries to be executed when the migration is run (in public function up ) and optionally queries that undo those changes (in public function down ). Here is an example you can add in public function up $this-&gt;addSql('ALTER TABLE users ADD test VARCHAR(255) NOT NULL'); and its opposite in public function down $this-&gt;addSql('ALTER TABLE users DROP test');","title":"Creating migrations"},{"location":"v5/installation/doctrine-orm/#executing-fixtures","text":"Fixtures are used to seed the database with initial values and should only be executed ONCE, after migrating the database. Seeding the database is done with the help of our custom package dotkernel/dot-data-fixtures built on top of doctrine/data-fixtures. See below on how to use our CLI command for listing and executing Doctrine data fixtures. An example of a fixtures class is data/doctrine/fixtures/RoleLoader.php To list all the available fixtures, by order of execution, run: php bin/doctrine fixtures:list To execute all fixtures, run: php bin/doctrine fixtures:execute To execute a specific fixtures, run: php bin/doctrine fixtures:execute --class=RoleLoader Fixtures can and should be ordered to ensure database consistency, more on ordering fixtures can be found here : https://www.doctrine-project.org/projects/doctrine-data-fixtures/en/latest/how-to/fixture-ordering.html#fixture-ordering","title":"Executing fixtures"},{"location":"v5/installation/faq/","text":"Frequently Asked Questions How do I fix common permission issues? If running your project you encounter some permission issues, follow the below steps. Errors PHP Fatal error: Uncaught InvalidArgumentException: The directory \"/var/www/ example.local /html/data\" is not writable... PHP Fatal error: Uncaught InvalidArgumentException: The directory \"/var/www/ example.local /html/data/cache\" is not writable... PHP Fatal error: Uncaught InvalidArgumentException: The directory \"/var/www/ example.local /html/data/cache/doctrine\" is not writable... Fix: chmod -R 777 data Error PHP Fatal error: Uncaught InvalidArgumentException: The directory \"/var/www/ example.local /html/public/uploads\" is not writable... Fix: chmod -R 777 public/uploads Error PHP Fatal error: Uncaught ErrorException: fopen(/var/www/ example.local /config/autoload/../../log/error-log- yyyy-mm-dd.log ): Failed to open stream: Permission denied... Fix: chmod -R 777 log","title":"FAQ"},{"location":"v5/installation/faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"v5/installation/faq/#how-do-i-fix-common-permission-issues","text":"If running your project you encounter some permission issues, follow the below steps.","title":"How do I fix common permission issues?"},{"location":"v5/installation/getting-started/","text":"Clone the project Recommended development environment If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more here: PHP-Mariadb-on-WLS2 Using your terminal, navigate inside the directory you want to download the project files into. Make sure that the directory is empty before proceeding to the download process. Once there, run the following command: git clone https://github.com/dotkernel/frontend.git .","title":"Getting Started"},{"location":"v5/installation/getting-started/#clone-the-project","text":"","title":"Clone the project"},{"location":"v5/installation/getting-started/#recommended-development-environment","text":"If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more here: PHP-Mariadb-on-WLS2 Using your terminal, navigate inside the directory you want to download the project files into. Make sure that the directory is empty before proceeding to the download process. Once there, run the following command: git clone https://github.com/dotkernel/frontend.git .","title":"Recommended development environment"},{"location":"v5/installation/running-application/","text":"Running the application We recommend running your applications in WSL: make sure you have WSL installed on your system currently we provide a distro implementations for AlmaLinux9 install the application in a virtualhost as recommended by the chosen distro set $baseUrl in config/autoload/local.php to the address of the virtualhost run the application by opening the virtualhost address in your browser You should see the DotKernel Frontend welcome page. NOTE: If you are getting exceptions or errors regarding some missing services, try running the following command: sudo php bin/clear-config-cache.php If config-cache.php is present that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE in config/autoload/mezzio.global.php Development only : session.cookie_secure does not work locally so make sure you modify your local.php , as per the following: # other code return [ # other configurations... 'session_config' =&gt; [ 'cookie_secure' =&gt; false, ], ]; Do not change this in local.php.dist as well because this value should remain true on production.","title":"Running the Application"},{"location":"v5/installation/running-application/#running-the-application","text":"We recommend running your applications in WSL: make sure you have WSL installed on your system currently we provide a distro implementations for AlmaLinux9 install the application in a virtualhost as recommended by the chosen distro set $baseUrl in config/autoload/local.php to the address of the virtualhost run the application by opening the virtualhost address in your browser You should see the DotKernel Frontend welcome page. NOTE: If you are getting exceptions or errors regarding some missing services, try running the following command: sudo php bin/clear-config-cache.php If config-cache.php is present that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE in config/autoload/mezzio.global.php Development only : session.cookie_secure does not work locally so make sure you modify your local.php , as per the following: # other code return [ # other configurations... 'session_config' =&gt; [ 'cookie_secure' =&gt; false, ], ]; Do not change this in local.php.dist as well because this value should remain true on production.","title":"Running the application"},{"location":"v5/introduction/file-structure/","text":"File structure Dotkernel Frontend follows the PSR-4 standards. It is a good practice to standardize the file structure of projects. When using DotKernel Frontend the following structure is installed by default: Main directories bin - executable files from CLI config - various configuration files data - should contain project-related data (AVOID storing sensitive data on VCS) documentation - should contain project-related documentation log - storage of log files generated by dot-error-log library public - publicly visible files. The webserver need to have this folder as www-document root folder. src - should contain the source code files test - should contain the test files Special purpose folders .github - containes workflow files .laminas-ci - contains laminas-ci workflow files src directory This directory contains all source code related to the Module. It should contain following directories, if they’re not empty: Handler - Action classes (similar to Controllers but can only perform one action) Entity - For database entities Service - Service classes Collection - Database entities collections Repository - Entity repository folder The above example is just some of the directories a project may include, but these should give you an idea of how the structure should look like. Other classes in the src directory may include InputFilter , EventListener , Helper , Command , Factory etc. The src directory should also contain 2 files: ConfigProvider.php - Provides configuration data RoutesDelegator.php - Module main routes entry file templates directory This directory contains the template files, used for example to help render e-mail templates. DotKernel Frontend uses twig as Templating Engine. All template files have the extension .html.twig data directory This directory contains project-related data (such as cache, file uploads) We recommend using the following directory structure: data/cache - location where caches are stored data/doctrine - fixtures and migrations data/lock - lock files generated by dotkernel/dot-cli See more","title":"File Structure"},{"location":"v5/introduction/file-structure/#file-structure","text":"Dotkernel Frontend follows the PSR-4 standards. It is a good practice to standardize the file structure of projects. When using DotKernel Frontend the following structure is installed by default:","title":"File structure"},{"location":"v5/introduction/file-structure/#main-directories","text":"bin - executable files from CLI config - various configuration files data - should contain project-related data (AVOID storing sensitive data on VCS) documentation - should contain project-related documentation log - storage of log files generated by dot-error-log library public - publicly visible files. The webserver need to have this folder as www-document root folder. src - should contain the source code files test - should contain the test files","title":"Main directories"},{"location":"v5/introduction/file-structure/#special-purpose-folders","text":".github - containes workflow files .laminas-ci - contains laminas-ci workflow files","title":"Special purpose folders"},{"location":"v5/introduction/file-structure/#src-directory","text":"This directory contains all source code related to the Module. It should contain following directories, if they’re not empty: Handler - Action classes (similar to Controllers but can only perform one action) Entity - For database entities Service - Service classes Collection - Database entities collections Repository - Entity repository folder The above example is just some of the directories a project may include, but these should give you an idea of how the structure should look like. Other classes in the src directory may include InputFilter , EventListener , Helper , Command , Factory etc. The src directory should also contain 2 files: ConfigProvider.php - Provides configuration data RoutesDelegator.php - Module main routes entry file","title":"src directory"},{"location":"v5/introduction/file-structure/#templates-directory","text":"This directory contains the template files, used for example to help render e-mail templates. DotKernel Frontend uses twig as Templating Engine. All template files have the extension .html.twig","title":"templates directory"},{"location":"v5/introduction/file-structure/#data-directory","text":"This directory contains project-related data (such as cache, file uploads) We recommend using the following directory structure: data/cache - location where caches are stored data/doctrine - fixtures and migrations data/lock - lock files generated by dotkernel/dot-cli See more","title":"data directory"},{"location":"v5/introduction/introduction/","text":"frontend Dotkernel web starter package suitable for frontend applications.","title":"Introduction"},{"location":"v5/introduction/introduction/#frontend","text":"Dotkernel web starter package suitable for frontend applications.","title":"frontend"},{"location":"v5/introduction/packages/","text":"Packages dotkernel/dot-dependency-injection - Dependency injection component using class attributes. dotkernel/dot-authorization - Authorization base package defining interfaces for authorization services to be used with DotKernel applications dotkernel/dot-controller - Provides base classes for action based controllers similar to Laminas controller component dotkernel/dot-data-fixtures - Provides a CLI interface for listing &amp; executing doctrine data fixtures dotkernel/dot-debugbar - Wrapper on top of maximebf/php-debugbar dotkernel/dot-errorhandler - Logging Error Handler for Middleware Applications dotkernel/dot-flashmessenger - Provides session messages between redirects dotkernel/dot-mail - Mail component based on laminas-mail dotkernel/dot-navigation - Allows you to easily define and parse menus inside templates, configuration based approach dotkernel/dot-rbac-guard - Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria dotkernel/dot-response-header - Middleware for setting custom response headers dotkernel/dot-session - DotKernel session component extending and customizing laminas-session dotkernel/dot-twigrenderer - DotKernel component providing twig extensions and customizations friendsofphp/proxy-manager-lts - Fork of ocramius/proxy-manager laminas/laminas-component-installer - Composer plugin for injecting modules and configuration providers into application configuration laminas/laminas-config-aggregator - Lightweight library for collecting and merging configuration from different sources laminas/laminas-form - Bridge between your domain models and the View Layer laminas/laminas-i18n - Complete translation suite mezzio/mezzio - PSR-15 Middleware Microframework mezzio/mezzio-authorization-rbac - mezzio authorization rbac adapter for laminas/laminas-permissions-rbac mezzio/mezzio-cors - CORS component for Mezzio and other PSR-15 middleware runners mezzio/mezzio-fastroute - FastRoute integration for Mezzio ramsey/uuid-doctrine - Use ramsey/uuid as a Doctrine field type roave/psr-container-doctrine - Doctrine Factories for PSR-11 Containers","title":"Packages"},{"location":"v5/introduction/packages/#packages","text":"dotkernel/dot-dependency-injection - Dependency injection component using class attributes. dotkernel/dot-authorization - Authorization base package defining interfaces for authorization services to be used with DotKernel applications dotkernel/dot-controller - Provides base classes for action based controllers similar to Laminas controller component dotkernel/dot-data-fixtures - Provides a CLI interface for listing &amp; executing doctrine data fixtures dotkernel/dot-debugbar - Wrapper on top of maximebf/php-debugbar dotkernel/dot-errorhandler - Logging Error Handler for Middleware Applications dotkernel/dot-flashmessenger - Provides session messages between redirects dotkernel/dot-mail - Mail component based on laminas-mail dotkernel/dot-navigation - Allows you to easily define and parse menus inside templates, configuration based approach dotkernel/dot-rbac-guard - Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria dotkernel/dot-response-header - Middleware for setting custom response headers dotkernel/dot-session - DotKernel session component extending and customizing laminas-session dotkernel/dot-twigrenderer - DotKernel component providing twig extensions and customizations friendsofphp/proxy-manager-lts - Fork of ocramius/proxy-manager laminas/laminas-component-installer - Composer plugin for injecting modules and configuration providers into application configuration laminas/laminas-config-aggregator - Lightweight library for collecting and merging configuration from different sources laminas/laminas-form - Bridge between your domain models and the View Layer laminas/laminas-i18n - Complete translation suite mezzio/mezzio - PSR-15 Middleware Microframework mezzio/mezzio-authorization-rbac - mezzio authorization rbac adapter for laminas/laminas-permissions-rbac mezzio/mezzio-cors - CORS component for Mezzio and other PSR-15 middleware runners mezzio/mezzio-fastroute - FastRoute integration for Mezzio ramsey/uuid-doctrine - Use ramsey/uuid as a Doctrine field type roave/psr-container-doctrine - Doctrine Factories for PSR-11 Containers","title":"Packages"},{"location":"v5/introduction/server-requirements/","text":"Server Requirements For production, we highly recommend a *nix based system. Webserver Apache &gt;= 2.2 or Nginx mod_rewrite .htaccess support (AllowOverride All) PHP &gt;= 8.2 Both mod_php and FCGI (FPM) are supported. Required Settings and Modules &amp; Extensions memory_limit &gt;= 128M upload_max_filesize and post_max_size &gt;= 100M (depending on your data) mbstring CLI SAPI (for Cron Jobs) Composer (added to $PATH) RDBMS MariaDB &gt;= 10.11 LTS Recommended extensions opcache pdo_mysql or mysqli (if using MySQL or MariaDB as RDBMS) dom - if working with markup files structure (html, xml etc.) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compressing files curl (required if APIs are used) sqlite3 - for tests","title":"Server Requirements"},{"location":"v5/introduction/server-requirements/#server-requirements","text":"For production, we highly recommend a *nix based system.","title":"Server Requirements"},{"location":"v5/introduction/server-requirements/#webserver","text":"Apache &gt;= 2.2 or Nginx mod_rewrite .htaccess support (AllowOverride All)","title":"Webserver"},{"location":"v5/introduction/server-requirements/#php-82","text":"Both mod_php and FCGI (FPM) are supported.","title":"PHP &gt;= 8.2"},{"location":"v5/introduction/server-requirements/#required-settings-and-modules-extensions","text":"memory_limit &gt;= 128M upload_max_filesize and post_max_size &gt;= 100M (depending on your data) mbstring CLI SAPI (for Cron Jobs) Composer (added to $PATH)","title":"Required Settings and Modules &amp; Extensions"},{"location":"v5/introduction/server-requirements/#rdbms","text":"MariaDB &gt;= 10.11 LTS","title":"RDBMS"},{"location":"v5/introduction/server-requirements/#recommended-extensions","text":"opcache pdo_mysql or mysqli (if using MySQL or MariaDB as RDBMS) dom - if working with markup files structure (html, xml etc.) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compressing files curl (required if APIs are used) sqlite3 - for tests","title":"Recommended extensions"}]}